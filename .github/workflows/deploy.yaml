name: deploy ðŸš€
on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: 'Choose the branch to use.'
        default: 'develop'
        type: string
        required: true
      ACCOUNT:
        description: 'Choose account to deploy to'
        default: 'sp-dev'
        type: choice
        options:
          - sp-dev
          - sp-stg
          - sp-prd
      STACK_PREFIX:
        description: 'Specify the stack prefix (if personal stack). Example: stack prefix of mz will result in tokeniser-api-cdk-sp-dev-mz-shared'
        type: string
      STACK:
        description: 'Choose the stack to deploy/update'
        type: choice
        options:
            - dashboard
            - ecs
            - redis
            - rds
            - s3upload
            - shared
      DEPLOY_EXCLUSIVE:
        description: 'Flag to deploy/update ONLY the selected stack'
        type: boolean
        default: false
      SKIP_CDK_DIFF:
        description: 'Flag to skip aws cdk diff result and force deployment. It is required for AMI update'
        type: boolean
        default: false
      STACK_PROFILE:
        description: 'Choose the stack profile to deploy. Example: Choosing large will deploy large instances of rds, redis and ecs'
        type: choice
        options:
          - default
          - prd-default
          - medium
          - large
      DOCKER_TAG:
        description: 'Choose the docker image tag to deploy, For example, feature-GENPME-4-cdk-migration-1'
        type: string
        required: true
        default: 'latest'
      CR_NUMBER:
        description: 'If it is a prod deployment and you have a CR, specify it here'
        type: string

defaults:
  run:
    shell: bash

env:
  CONFIG: tokeniser.env
  ECS_DEPLOYMENT: 'blue'
  ECS_LIVE_STACK: 'blue'
  STACK_DEPLOYMENT: true

run-name: "deploy-${{ inputs.ACCOUNT }}-${{ inputs.STACK }}-${{ inputs.DOCKER_TAG }}"
jobs:
  input:
    runs-on: ubuntu-latest
    steps:
      - name: Job summery
        run: |
         {
          echo "| Name | Value |"
          echo "| -------------- | ----------------- |"
          echo "| BRANCH | ${{ inputs.BRANCH }} |"
          echo "| ACCOUNT | ${{ inputs.ACCOUNT }} |"
          echo "| STACK_PREFIX | ${{ inputs.STACK_PREFIX }} |"
          echo "| STACK | ${{ inputs.STACK }} |"
          echo "| DEPLOY_EXCLUSIVE | ${{ inputs.DEPLOY_EXCLUSIVE }} |"
          echo "| SKIP_CDK_DIFF | ${{ inputs.SKIP_CDK_DIFF }} |"
          echo "| DOCKER_TAG | ${{ inputs.DOCKER_TAG }} |"
          echo "| CR_NUMBER | ${{ inputs.CR_NUMBER }} |"
         } >> $GITHUB_STEP_SUMMARY
        
  pre-deploy:
    runs-on: ubuntu-latest
    outputs:
      job_name: ${{ steps.job-name.outputs.JOB_NAME }}
    steps:
      - name: Validate Input
        run: |
          if [[ "${{ inputs.STACK_PROFILE }}" == "prd-default" && "${{ inputs.ACCOUNT }}" == "sp-stg" ]]; then
            echo "Unsupported parameter. The STACK_PROFILE 'prd-default' only supported in 'sp-stg' account"
            exit 1
          fi
        
      - name: Print Input Parameters
        run: | 
          echo "ACCOUNT: ${{ inputs.ACCOUNT }}"
          echo "STACK_PREFIX: ${{ inputs.STACK_PREFIX }}"
          echo "STACK: ${{ inputs.STACK }}"
          #echo "SCALING_PROFILE: ${{ inputs.SCALING_PROFILE }}"
          #echo "FORCE_DEPLOY: ${{ inputs.FORCE_DEPLOY }}"
          echo "DEPLOY_EXCLUSIVE: ${{ inputs.DEPLOY_EXCLUSIVE }}"
          #echo "SAFE_MODE: ${{ inputs.SAFE_MODE }}"
          echo "DOCKER_TAG: ${{ inputs.DOCKER_TAG }}"
          echo "CR_NUMBER: ${{ inputs.CR_NUMBER }}"

      - if: ${{ inputs.STACK_PREFIX != '' }}
        name: Ensure STACK_PREFIX is lower case
        id: stack-prefix
        run: |
          sp=${{ inputs.STACK_PREFIX }}
          echo "STACK_PREFIX_LC=${sp,,}" >> $GITHUB_OUTPUT

      - name: Create Job Name
        id: job-name
        run: |
          echo "JOB_NAME=${{ (inputs.STACK_PREFIX != '') && format('{0}-{1}-{2}', inputs.ACCOUNT, steps.stack-prefix.outputs.STACK_PREFIX_LC, inputs.STACK) || format('{0}-{1}', inputs.ACCOUNT, inputs.STACK) }}" >> $GITHUB_OUTPUT
  
  deploy:
    name: deploy-${{ needs.pre-deploy.outputs.job_name }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.ACCOUNT }}
    needs: [pre-deploy,job-summery]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      

          
