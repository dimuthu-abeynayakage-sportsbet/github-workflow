name: Deploy ðŸš€
on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: 'Choose the branch to use.'
        default: 'develop'
        type: string
        required: true
      ACCOUNT:
        description: 'Choose account to deploy to'
        default: 'sp-dev'
        type: choice
        options:
          - sp-dev
          - sp-stg
          - sp-prd
      STACK_PREFIX:
        description: 'Specify the stack prefix (if personal stack). Example: stack prefix of mz will result in tokeniser-api-cdk-sp-dev-mz-shared'
        type: string
      STACK:
        description: 'Choose the stack to deploy/update'
        type: choice
        options:
            - dashboard
            - ecs
            - redis
            - rds
            - s3upload
            - shared
      DEPLOY_EXCLUSIVE:
        description: 'Flag to deploy/update ONLY the selected stack'
        type: boolean
        default: false
      SKIP_CDK_DIFF:
        description: 'Flag to skip aws cdk diff result and force deployment. It is required for AMI update'
        type: boolean
        default: false
      STACK_PROFILE:
        description: 'Choose the stack profile to deploy. Example: Choosing large will deploy large instances of rds, redis and ecs'
        type: choice
        options:
          - default
          - prd-default
          - medium
          - large
      DOCKER_TAG:
        description: 'Choose the docker image tag to deploy, For example, feature-GENPME-4-cdk-migration-1'
        type: string
        required: true
        default: 'latest'
      CR_NUMBER:
        description: 'If it is a prod deployment and you have a CR, specify it here'
        type: string

defaults:
  run:
    shell: bash

env:
  CONFIG: tokeniser.env
  ECS_DEPLOYMENT: 'blue'
  ECS_LIVE_STACK: 'blue'
  STACK_DEPLOYMENT: true

run-name: "Deploy-${{ inputs.ACCOUNT }}-${{ inputs.STACK }}-${{ inputs.DOCKER_TAG }}"
jobs:
  pre-deploy:
    name: pre-deploy
    runs-on: ubuntu-latest
    outputs:
      job_name: ${{ steps.job-name.outputs.JOB_NAME }}

    steps:
      - name: Job Summery
        run: |
          {
           echo "| Name | Value |"
           echo "| -------------- | ----------------- |"
           echo "| BRANCH | ${{ inputs.BRANCH }} |"
           echo "| ACCOUNT | ${{ inputs.ACCOUNT }} |"
           echo "| STACK_PREFIX | ${{ inputs.STACK_PREFIX }} |"
           echo "| STACK | ${{ inputs.STACK }} |"
           echo "| DEPLOY_EXCLUSIVE | ${{ inputs.DEPLOY_EXCLUSIVE }} |"
           echo "| SKIP_CDK_DIFF | ${{ inputs.SKIP_CDK_DIFF }} |"
           echo "| DOCKER_TAG | ${{ inputs.DOCKER_TAG }} |"
           echo "| CR_NUMBER | ${{ inputs.CR_NUMBER }} |"
          } >> $GITHUB_STEP_SUMMARY

      - name: Validate Stack Profile
        run: |
          if [[ "${{ inputs.STACK_PROFILE }}" == "prd-default" && "${{ inputs.ACCOUNT }}" == "sp-stg" ]]; then
            echo "Unsupported parameter. The STACK_PROFILE 'prd-default' only supported in 'sp-stg' account"
            exit 1
          fi

      - name: Validate CR Number
        if: contains('sp-prd', inputs.ACCOUNT)
        run: |
          if [[ -z '${{ inputs.CR_NUMBER }}' ]]; then
            echo "::error::CR Number is required for production deployment. Terminating workflow."
            exit 1
          else 
            echo "CR Number: ${{ inputs.CR_NUMBER }}. Continuing with production deployment."
          fi

      - if: ${{ inputs.STACK_PREFIX != '' }}
        name: Ensure STACK_PREFIX is lower case
        id: stack-prefix
        run: |
          sp=${{ inputs.STACK_PREFIX }}
          echo "STACK_PREFIX_LC=${sp,,}" >> $GITHUB_OUTPUT

      - name: Create Job Name
        id: job-name
        run: |
          echo "JOB_NAME=${{ (inputs.STACK_PREFIX != '') && format('{0}-{1}-{2}', inputs.ACCOUNT, steps.stack-prefix.outputs.STACK_PREFIX_LC, inputs.STACK) || format('{0}-{1}', inputs.ACCOUNT, inputs.STACK) }}" >> $GITHUB_OUTPUT

  deploy:
    name: deploy-${{ needs.pre-deploy.outputs.job_name }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.ACCOUNT }}
    needs: pre-deploy

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Read ENV Config
        run: cat .github/workflows/${{ env.CONFIG }} >> $GITHUB_ENV

      - name: Setup Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Yarn
        working-directory: ./aws-infra/cdk
        run: yarn

      - name: Print Versions
        run: |
            echo "node: $(node -v)"
            echo "npm: $(npm -v)"
            echo "yarn: $(yarn -v)"

      - name: Set Stack Parameters
        if: always()
        run: |
            echo "stackName=${{ (inputs.STACK_PREFIX != '') && format('{0}-{1}', needs.pre-deploy.outputs.stack_prefix_lc, inputs.STACK) || inputs.STACK }}" >> $GITHUB_ENV
            echo "scalingProfile=${{ (inputs.SCALING_PROFILE != 'normal') && format('-c scalingProfile={0}', inputs.SCALING_PROFILE) || '' }}" >> $GITHUB_ENV
            echo "stackPrefixCdkContext=${{ (inputs.STACK_PREFIX != '') && format('-c stackPrefix={0}', needs.pre-deploy.outputs.stack_prefix_lc) || '' }}" >> $GITHUB_ENV
            echo "exclusive=${{ (inputs.DEPLOY_EXCLUSIVE) && '--exclusively' || '' }}" >> $GITHUB_ENV
            echo "force=${{ (inputs.SKIP_CDK_DIFF) && '--force' || '' }}" >> $GITHUB_ENV

      - name: Print Stack Parameters
        if: always()
        run: |
          echo "stackName: ${{ env.stackName }}"
          echo "scalingProfile: ${{ env.scalingProfile }}"
          echo "stackPrefixCdkContext: ${{ env.stackPrefixCdkContext }}"
          echo "exclusive: ${{ env.exclusive }}"

      - if: ${{ env.DIFF == '1' || inputs.SKIP_CDK_DIFF }}
        name: Deploy Stack
        working-directory: ./aws-infra/cdk
        run: |
          echo "Deploying... tokeniser-api-cdk-${{ inputs.ACCOUNT }}-${{ env.stackName }}"
          echo "tokeniser-api-cdk-${{ inputs.ACCOUNT }}-${{ env.stackName }} ${{ env.stackPrefixCdkContext }} ${{ env.scalingProfile }} -c dockerTag=${{ inputs.DOCKER_TAG }} --require-approval never ${{ env.exclusive }} ${{ env.force }}"
          #yarn cdk deploy tokeniser-api-cdk-${{ inputs.ACCOUNT }}-${{ env.stackName }} ${{ env.stackPrefixCdkContext }} ${{ env.scalingProfile }} -c dockerTag=${{ inputs.DOCKER_TAG }} --require-approval never ${{ env.exclusive }} ${{ env.force }}
